ssh pi@10.0.0.1
(Password: raspberry)


roscore &


sudo apt-get install ros-noetic-cv-bridge


nano red_object_follower.py

#---------------------------------------------------------------------

import cv2
import numpy as np
import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import Image
from cv_bridge import CvBridge

class ColorFollower:
    def __init__(self):  # Corrigido de _init para _init_
        rospy.init_node('color_follower')
        self.bridge = CvBridge()
        self.cmd_vel_pub = rospy.Publisher('/cmd_vel', Twist, queue_size=10)
        self.image_sub = rospy.Subscriber('/camera/image_raw', Image, self.image_callback)
        self.stop_on_loss = False  # Alternar entre parar ou procurar ao perder a cor
        self.lost_frames = 0  # Contador de frames sem deteção
        self.searching = False  # Estado de busca ativa
    
    def image_callback(self, msg):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(msg, 'bgr8')
        except Exception as e:
            rospy.logerr(f"Erro na conversão da imagem: {e}")
            return
        
        mask, cx, cy, area = self.detect_red(cv_image)
        
        if cx is not None and cy is not None:
            self.lost_frames = 0  # Reset ao contador
            self.searching = False
            self.move_robot(cx, cy, area)
        else:
            self.lost_frames += 1
            if self.lost_frames > 5:
                self.search_for_target()  # Procurar ativamente
    
    def detect_red(self, image):
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
        lower_red1 = np.array([0, 120, 70])
        upper_red1 = np.array([10, 255, 255])
        lower_red2 = np.array([170, 120, 70])
        upper_red2 = np.array([180, 255, 255])
        mask1 = cv2.inRange(hsv, lower_red1, upper_red1)
        mask2 = cv2.inRange(hsv, lower_red2, upper_red2)
        mask = mask1 + mask2
        
        contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        if contours:
            largest_contour = max(contours, key=cv2.contourArea)
            M = cv2.moments(largest_contour)
            if M['m00'] > 0:
                cx = int(M['m10'] / M['m00'])
                cy = int(M['m01'] / M['m00'])
                area = cv2.contourArea(largest_contour)
                return mask, cx, cy, area
        return mask, None, None, None
    
    def move_robot(self, cx, cy, area):
        twist = Twist()
        width = 640  # Supondo que a resolução seja 640x480
        center_x = width // 2
        
        # Controle de rotação
        error_x = cx - center_x
        twist.angular.z = -float(error_x) / 1000.0  # Ajuste proporcional
        
        # Controle de avanço para bola (baseado na área da deteção)
        if area < 5000:
            twist.linear.x = 0.2  # Avança
        elif area > 10000:
            twist.linear.x = -0.1  # Recuar
        else:
            twist.linear.x = 0.0  # Parado na distância correta
        
        self.cmd_vel_pub.publish(twist)
    
    def stop_robot(self):
        twist = Twist()
        self.cmd_vel_pub.publish(twist)
    
    def search_for_target(self):
        twist = Twist()
        twist.angular.z = 0.6  # Gira mais rápido para procurar a cor
        self.cmd_vel_pub.publish(twist)

if __name__ == '__main__':  # Corrigido de _name e main para _name_ e _main_
    try:
        follower = ColorFollower()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass

#-------------------------------------------------------------------------
Ctrl x - exit
y - save
Enter - Confirm name


chmod +x red_object_follower.py


python3 red_object_follower.py
